<?php

namespace Moonwalker\Core;

use League\Route\ContainerAwareInterface;
use League\Route\ContainerAwareTrait;
use Maghead\Runtime\Collection;
use Moonwalker\Core\Errors\ValidationFailedException;
use Valitron\Validator;

class Controller implements ContainerAwareInterface
{
    use ContainerAwareTrait;

    /** @var \League\Container\Container $container */
    protected $container;

    /** @var \Valitron\Validator $validator */
    protected $validator;

    public function __construct()
    {

    }

    public function validate (Array $data, Array $rules)
    {
        if (is_null($this->validator))
            $this->validator = new Validator($data);
        else
            $this->validator->withData($data);

        $this->validator->rules($rules);

        return $this->validator->validate();
    }

    /*
     * @param Array $param This is the full set of request parameters, get it like $request->getQueryParams() in Controller context
     * @param Collection $collection This is the collection object of the model generated by Maghead
     * @param Array $metadata This provides a map of what the default pagination parameters are to be called, by default they are "page" (as in page number) and "page_size" (records par page)
     * @return mixed Returns either an array if pagination is applied, or false if not.
     */
    public function paginate (Array $params, Collection $collection, Array $metadata = null)
    {
        if (is_null($metadata))
        {
            $metadata = [
                'page' => 'page',
                'page_size' => 'page_size'
            ];
        }

        if (array_key_exists($metadata['page'], $params) && array_key_exists($metadata['page_size'], $params))
        {
            if (! $this->validate($params, [
                'integer' => [
                    [ $metadata['page'] ],
                    [ $metadata['page_size'] ]
                ]
            ]))
                throw new ValidationFailedException($this->validator->errors());
            $count = $collection->count();

            $collection->page($params['page'], $params['page_size']);
            return [
                'paging_applied' => true,
                'record_count' => $count
            ];
        }
        else
            return false;
    }
}